name: CI/CD for Containerized Architecture

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AZURE_RESOURCE_GROUP: rg-traffic-sign-detector-prod
  AZURE_CONTAINER_REGISTRY: acrtrafficsignprod
  AZURE_CONTAINER_APPS_ENVIRONMENT: whitestone-e7e06cfe
  AZURE_BACKEND_CONTAINER_APP: backend-traffic-prod
  AZURE_FRONTEND_CONTAINER_APP: frontend-traffic-prod
  POSTGRESQL_SERVER_NAME: psql-traffic-sign-prod-new
  POSTGRESQL_DATABASE_NAME: traffic_sign_detector
  REDIS_CACHE_NAME: redis-traffic-sign-detector-prod

jobs:
  build-and-push-backend:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Log in to Azure Container Registry
      uses: azure/docker-login@v1
      with:
        login-server: ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}

    - name: Build and push backend Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.backend
        push: true
        tags: |
          ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/traffic-sign-backend:${{ github.sha }}
          ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/traffic-sign-backend:latest

  build-and-push-frontend:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Log in to Azure Container Registry
      uses: azure/docker-login@v1
      with:
        login-server: ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}

    - name: Build and push frontend Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.frontend
        push: true
        tags: |
          ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/traffic-sign-frontend:${{ github.sha }}
          ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/traffic-sign-frontend:latest

  deploy-apps:
    needs: [build-and-push-backend, build-and-push-frontend]
    runs-on: ubuntu-latest
    environment: production
    steps:
    - uses: actions/checkout@v4

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Deploy Backend Container App
      uses: azure/container-apps-deploy-action@v1
      with:
        containerAppName: ${{ env.AZURE_BACKEND_CONTAINER_APP }}
        resourceGroup: ${{ env.AZURE_RESOURCE_GROUP }}
        imageToDeploy: ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/traffic-sign-backend:latest
        containerAppEnvironment: ${{ env.AZURE_CONTAINER_APPS_ENVIRONMENT }}
        acrName: ${{ env.AZURE_CONTAINER_REGISTRY }}
        acrUsername: ${{ secrets.ACR_USERNAME }}
        acrPassword: ${{ secrets.ACR_PASSWORD }}
        targetPort: 8000
        ingress: 'external'
        environmentVariables: |
          DATABASE_URL=postgresql://${{ secrets.DB_ADMIN_USERNAME }}:${{ secrets.DB_ADMIN_PASSWORD }}@${{ env.POSTGRESQL_SERVER_NAME }}.postgres.database.azure.com:5432/${{ env.POSTGRESQL_DATABASE_NAME }}?sslmode=require
          REDIS_URL=rediss://:${{ secrets.REDIS_PASSWORD }}@${{ env.REDIS_CACHE_NAME }}.redis.cache.windows.net:6380/0
          SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}
          DEBUG=False
          ALLOWED_HOSTS=*.azurecontainerapps.io
          APPLICATIONINSIGHTS_CONNECTION_STRING=${{ secrets.APPLICATION_INSIGHTS_CONNECTION_STRING }}

    - name: Deploy Frontend Container App
      uses: azure/container-apps-deploy-action@v1
      with:
        containerAppName: ${{ env.AZURE_FRONTEND_CONTAINER_APP }}
        resourceGroup: ${{ env.AZURE_RESOURCE_GROUP }}
        imageToDeploy: ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/traffic-sign-frontend:latest
        containerAppEnvironment: ${{ env.AZURE_CONTAINER_APPS_ENVIRONMENT }}
        acrName: ${{ env.AZURE_CONTAINER_REGISTRY }}
        acrUsername: ${{ secrets.ACR_USERNAME }}
        acrPassword: ${{ secrets.ACR_PASSWORD }}
        targetPort: 80
        ingress: 'external'
        environmentVariables: |
          REACT_APP_API_URL=https://${{ env.AZURE_BACKEND_CONTAINER_APP }}.whitestone-e7e06cfe.eastus.azurecontainerapps.io
