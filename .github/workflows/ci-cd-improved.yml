name: Improved CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  AZURE_WEBAPP_NAME: traffic-sign-detector
  PYTHON_VERSION: '3.10'
  NODE_VERSION: '20'

jobs:
  # Security and Quality Gates
  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run Snyk security scan
      uses: snyk/actions/python@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

  # Code Quality and Testing
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-django pytest-cov flake8 black isort mypy

    - name: Install Node.js dependencies
      run: |
        cd frontend
        npm ci

    - name: Lint Python code
      run: |
        flake8 backend/ --count --select=E9,F63,F7,F82 --show-source --statistics
        black --check backend/
        isort --check-only backend/
        mypy backend/

    - name: Lint JavaScript code
      run: |
        cd frontend
        npm run lint

    - name: Run Python tests with coverage
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/0
        SECRET_KEY: test-secret-key
      run: |
        cd backend
        pytest --cov=. --cov-report=xml --cov-report=html

    - name: Run JavaScript tests
      run: |
        cd frontend
        npm test -- --coverage --watchAll=false

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage

  # Build and Push Container Images
  build-and-push:
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Azure Container Registry
      uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.ACR_LOGIN_SERVER }}
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.ACR_LOGIN_SERVER }}/traffic-sign-detector
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.prod
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        target: backend

    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.prod
        push: true
        tags: ${{ secrets.ACR_LOGIN_SERVER }}/traffic-sign-detector-frontend:${{ github.sha }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        target: frontend

  # Deploy Infrastructure
  deploy-infrastructure:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.0

    - name: Terraform Init
      run: |
        cd architecture/containerized
        terraform init \
          -backend-config="resource_group_name=${{ secrets.TF_STATE_RG }}" \
          -backend-config="storage_account_name=${{ secrets.TF_STATE_SA }}" \
          -backend-config="container_name=${{ secrets.TF_STATE_CONTAINER }}" \
          -backend-config="key=traffic-sign-detector.tfstate"

    - name: Terraform Validate
      run: |
        cd architecture/containerized
        terraform validate

    - name: Terraform Plan
      run: |
        cd architecture/containerized
        terraform plan \
          -var="db_admin_password=${{ secrets.DB_ADMIN_PASSWORD }}" \
          -var="django_secret_key=${{ secrets.DJANGO_SECRET_KEY }}" \
          -var="redis_password=${{ secrets.REDIS_PASSWORD }}" \
          -out=tfplan

    - name: Terraform Apply
      run: |
        cd architecture/containerized
        terraform apply -auto-approve tfplan

    - name: Get Terraform Outputs
      id: terraform
      run: |
        cd architecture/containerized
        echo "backend_url=$(terraform output -raw backend_container_app_url)" >> $GITHUB_OUTPUT
        echo "frontend_url=$(terraform output -raw frontend_container_app_url)" >> $GITHUB_OUTPUT
        echo "front_door_url=$(terraform output -raw front_door_url)" >> $GITHUB_OUTPUT

  # Deploy Application
  deploy-application:
    runs-on: ubuntu-latest
    needs: deploy-infrastructure
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Deploy to Container Apps
      run: |
        # Update container app with new image
        az containerapp update \
          --name traffic-sign-detector-backend \
          --resource-group ${{ secrets.RESOURCE_GROUP_NAME }} \
          --image ${{ secrets.ACR_LOGIN_SERVER }}/traffic-sign-detector:${{ github.sha }}

    - name: Run Database Migrations
      run: |
        # Run migrations using Azure Container Instances
        az container create \
          --resource-group ${{ secrets.RESOURCE_GROUP_NAME }} \
          --name migration-job \
          --image ${{ secrets.ACR_LOGIN_SERVER }}/traffic-sign-detector:${{ github.sha }} \
          --command-line "python manage.py migrate" \
          --environment-variables \
            DATABASE_URL="${{ secrets.DATABASE_URL }}" \
            SECRET_KEY="${{ secrets.DJANGO_SECRET_KEY }}" \
          --restart-policy Never

    - name: Health Check
      run: |
        # Wait for deployment to be ready
        sleep 30
        
        # Check backend health
        curl -f ${{ needs.deploy-infrastructure.outputs.backend_url }}/admin/ || exit 1
        
        # Check frontend health
        curl -f ${{ needs.deploy-infrastructure.outputs.frontend_url }} || exit 1

  # Performance Testing
  performance-test:
    runs-on: ubuntu-latest
    needs: deploy-application
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4

    - name: Install k6
      run: |
        sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6

    - name: Run performance tests
      run: |
        k6 run --vus 10 --duration 30s performance-tests/load-test.js

  # Security Testing
  security-test:
    runs-on: ubuntu-latest
    needs: deploy-application
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4

    - name: Run OWASP ZAP Baseline Scan
      uses: zaproxy/action-baseline@v0.7.0
      with:
        target: ${{ needs.deploy-infrastructure.outputs.front_door_url }}
        rules_file_name: '.zap/rules.tsv'
        cmd_options: '-a'

  # Notify and Cleanup
  notify:
    runs-on: ubuntu-latest
    needs: [deploy-application, performance-test, security-test]
    if: always()
    
    steps:
    - name: Notify deployment status
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
      if: always()

    - name: Create deployment summary
      run: |
        echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Backend URL**: ${{ needs.deploy-infrastructure.outputs.backend_url }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Frontend URL**: ${{ needs.deploy-infrastructure.outputs.frontend_url }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Front Door URL**: ${{ needs.deploy-infrastructure.outputs.front_door_url }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
