name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  AZURE_WEBAPP_NAME: traffic-sign-detector
  AZURE_WEBAPP_PACKAGE_PATH: '.'
  PYTHON_VERSION: '3.10'
  NODE_VERSION: '20'

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-django pytest-cov flake8 black isort

    - name: Install Node.js dependencies
      run: |
        cd frontend
        npm ci

    - name: Lint Python code
      run: |
        flake8 backend/ --count --select=E9,F63,F7,F82 --show-source --statistics
        black --check backend/
        isort --check-only backend/

    - name: Lint JavaScript code
      run: |
        cd frontend
        npm run lint

    - name: Run Python tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/0
        SECRET_KEY: test-secret-key
      run: |
        cd backend
        python manage.py test --settings=traffic_sign_detector.test_settings

    - name: Run JavaScript tests
      run: |
        cd frontend
        npm test -- --coverage --watchAll=false

    - name: Build React application
      run: |
        cd frontend
        npm run build

  security-scan:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  build-and-push:
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Azure Container Registry
      uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.ACR_LOGIN_SERVER }}
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.ACR_LOGIN_SERVER }}/traffic-sign-detector:${{ github.sha }}
          ${{ secrets.ACR_LOGIN_SERVER }}/traffic-sign-detector:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-infrastructure:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.0

    - name: Terraform Init
      run: |
        cd infrastructure/terraform
        terraform init \
          -backend-config="resource_group_name=${{ secrets.TF_STATE_RG }}" \
          -backend-config="storage_account_name=${{ secrets.TF_STATE_SA }}" \
          -backend-config="container_name=${{ secrets.TF_STATE_CONTAINER }}" \
          -backend-config="key=traffic-sign-detector.tfstate"

    - name: Terraform Plan
      run: |
        cd infrastructure/terraform
        terraform plan \
          -var="ssh_public_key=${{ secrets.SSH_PUBLIC_KEY }}" \
          -var="db_admin_password=${{ secrets.DB_ADMIN_PASSWORD }}" \
          -var="django_secret_key=${{ secrets.DJANGO_SECRET_KEY }}" \
          -out=tfplan

    - name: Terraform Apply
      run: |
        cd infrastructure/terraform
        terraform apply -auto-approve tfplan

    - name: Get Terraform Outputs
      id: terraform
      run: |
        cd infrastructure/terraform
        echo "vm_public_ip=$(terraform output -raw vm_public_ip)" >> $GITHUB_OUTPUT
        echo "postgresql_server_fqdn=$(terraform output -raw postgresql_server_fqdn)" >> $GITHUB_OUTPUT
        echo "redis_cache_hostname=$(terraform output -raw redis_cache_hostname)" >> $GITHUB_OUTPUT

  deploy-application:
    runs-on: ubuntu-latest
    needs: deploy-infrastructure
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4

    - name: Setup Ansible
      run: |
        pip install ansible[azure]
        ansible-galaxy collection install azure.azcollection

    - name: Create Ansible inventory
      run: |
        echo "[all]" > inventory.ini
        echo "${{ needs.deploy-infrastructure.outputs.vm_public_ip }} ansible_user=azureuser ansible_ssh_private_key_file=~/.ssh/id_rsa" >> inventory.ini

    - name: Generate SSH key pair
      run: |
        ssh-keygen -t rsa -b 4096 -f ~/.ssh/id_rsa -N ""
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa

    - name: Deploy with Ansible
      run: |
        ansible-playbook -i inventory.ini infrastructure/ansible/playbook.yml \
          -e "vm_public_ip=${{ needs.deploy-infrastructure.outputs.vm_public_ip }}" \
          -e "postgresql_server_fqdn=${{ needs.deploy-infrastructure.outputs.postgresql_server_fqdn }}" \
          -e "redis_cache_hostname=${{ needs.deploy-infrastructure.outputs.redis_cache_hostname }}" \
          -e "db_admin_username=${{ secrets.DB_ADMIN_USERNAME }}" \
          -e "db_admin_password=${{ secrets.DB_ADMIN_PASSWORD }}" \
          -e "django_secret_key=${{ secrets.DJANGO_SECRET_KEY }}" \
          -e "django_admin_password=${{ secrets.DJANGO_ADMIN_PASSWORD }}" \
          -e "redis_password=${{ secrets.REDIS_PASSWORD }}" \
          -e "email_host_user=${{ secrets.EMAIL_HOST_USER }}" \
          -e "email_host_password=${{ secrets.EMAIL_HOST_PASSWORD }}" \
          -e "default_from_email=${{ secrets.DEFAULT_FROM_EMAIL }}" \
          -e "storage_account_name=${{ secrets.STORAGE_ACCOUNT_NAME }}" \
          -e "storage_account_key=${{ secrets.STORAGE_ACCOUNT_KEY }}" \
          -e "application_insights_connection_string=${{ secrets.APPLICATION_INSIGHTS_CONNECTION_STRING }}" \
          --private-key ~/.ssh/id_rsa

  notify:
    runs-on: ubuntu-latest
    needs: [deploy-application]
    if: always()
    
    steps:
    - name: Notify deployment status
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      if: always()
